import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from config import(
    REQUEST_RETRIES,
    CHROME_DRIVER_PATH,
    API_BASE_URL,
    TEST_SEARCH_DIGITS,
    TEST_SEARCH_LATIN,
    TEST_SEARCH_EMPTY,
    TEST_SEARCH_KIRILLIC,
    TEST_SEARCH_STANDARD
)
import allure


# üîπ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
@pytest.fixture(scope='session')
def browser():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    service = ChromeService(executable_path=CHROME_DRIVER_PATH)
    driver = webdriver.Chrome(service=service)
    yield driver
    driver.quit()


# üîπ –¢–µ—Å—Ç –Ω–∞ –ø–æ–∏—Å–∫ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
@allure.feature("HTML Parsing Tests")
@allure.story("–ü–æ–∏—Å–∫ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ")
def test_search_kirillitsa(browser):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ.
    """
    base_url = API_BASE_URL
    search_query = TEST_SEARCH_KIRILLIC

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    browser.get(base_url)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    wait = WebDriverWait(browser, 10)
    search_field = wait.until(EC.presence_of_element_located((By.ID, 'search-field')))
    search_field.clear()
    search_field.send_keys(search_query)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    search_field.submit()

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    wait = WebDriverWait(browser, 10)
    results = wait.until(
        EC.visibility_of_any_elements_located((By.CLASS_NAME, 'product-card__top'))
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    assert len(results) > 0, f'–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}'


# üîπ –¢–µ—Å—Ç –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å —Ü–∏—Ñ—Ä–∞–º–∏
@allure.feature("HTML Parsing Tests")
@allure.story("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å —Ü–∏—Ñ—Ä–∞–º–∏")
def test_search_with_digits(browser):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å —Ü–∏—Ñ—Ä–∞–º–∏.
    """
    base_url = API_BASE_URL
    search_query = TEST_SEARCH_DIGITS

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    browser.get(base_url)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    wait = WebDriverWait(browser, 10)
    search_field = wait.until(EC.presence_of_element_located((By.ID, 'search-field')))
    search_field.clear()
    search_field.send_keys(search_query)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    search_field.submit()

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    wait = WebDriverWait(browser, 10)
    results = wait.until(
        EC.visibility_of_any_elements_located((By.CLASS_NAME, 'product-card__top'))
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    assert len(results) > 0, f'–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}'


# üîπ –¢–µ—Å—Ç –Ω–∞ –ø–æ–∏—Å–∫ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
@allure.feature("HTML Parsing Tests")
@allure.story("–ü–æ–∏—Å–∫ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ")
def test_search_latinica(browser):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–∏—Å–∫ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    base_url = API_BASE_URL
    search_query = TEST_SEARCH_LATIN

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    browser.get(base_url)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    wait = WebDriverWait(browser, 10)
    search_field = wait.until(EC.presence_of_element_located((By.ID, 'search-field')))
    search_field.clear()
    search_field.send_keys(search_query)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    search_field.submit()

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    wait = WebDriverWait(browser, 10)
    results = wait.until(
        EC.visibility_of_any_elements_located((By.CLASS_NAME, 'product-card__top'))
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    assert len(results) > 0, f'–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}'


# üîπ –¢–µ—Å—Ç –Ω–∞ –ø–æ–∏—Å–∫ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
@allure.feature("HTML Parsing Tests")
@allure.story("–ü–æ–∏—Å–∫ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
def test_search_without_name(browser):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    base_url = API_BASE_URL

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    browser.get(base_url)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    wait = WebDriverWait(browser, 10)
    search_field = wait.until(EC.presence_of_element_located((By.ID, 'search-field')))
    search_field.clear()
    search_field.submit()

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–µ–≥–æ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    wait = WebDriverWait(browser, 10)
    no_results_message = wait.until(
        EC.visibility_of_element_located((By.XPATH, '//h1[contains(text(), "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏")]'))
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞–¥–ø–∏—Å—å "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏"
    assert no_results_message.is_displayed(), '–ù–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.'


# üîπ –¢–µ—Å—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@allure.feature("HTML Parsing Tests")
@allure.story("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
def test_standard_search(browser):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    """
    base_url = API_BASE_URL
    search_query = TEST_SEARCH_STANDARD

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    browser.get(base_url)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    wait = WebDriverWait(browser, 10)
    search_field = wait.until(EC.presence_of_element_located((By.ID, 'search-field')))
    search_field.clear()
    search_field.send_keys(search_query)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    search_field.submit()

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    wait = WebDriverWait(browser, 10)
    results = wait.until(
        EC.visibility_of_any_elements_located((By.CLASS_NAME, 'product-card__top'))
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    assert len(results) > 0, f'–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}'
