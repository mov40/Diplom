import pytest
import requests
import allure
from config import (
    REQUEST_RETRIES,
    CHROME_DRIVER_PATH,
    API_BASE_URL,
    TEST_SEARCH_DIGITS,
    TEST_SEARCH_LATIN,
    TEST_SEARCH_EMPTY,
    TEST_SEARCH_KIRILLIC,
    TEST_SEARCH_STANDARD
)

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
BASE_URL = API_BASE_URL
HEADERS = {'content-type': 'application/json'}

# üîπ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
@pytest.mark.positive
@allure.feature("API —Ç–µ—Å—Ç—ã")
@allure.story("–ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ")
def test_search_by_kirillica():
    title = TEST_SEARCH_KIRILLIC
    response = requests.get(f"{BASE_URL}/search/{title}", params={"stype": 0}, headers=HEADERS)
    assert response.status_code == 200
    content_type = response.headers.get('Content-Type', '')
    if content_type.startswith('text/html'):
        print('–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML')
    else:
        print(f'–û–∂–∏–¥–∞–ª–∏ HTML, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {content_type}')

@pytest.mark.positive
@allure.feature("API —Ç–µ—Å—Ç—ã")
@allure.story("–ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ")
def test_search_by_latinica():
    title = TEST_SEARCH_LATIN
    response = requests.get(f"{BASE_URL}/search/{title}", params={"stype": 0}, headers=HEADERS)
    assert response.status_code == 200
    content_type = response.headers.get('Content-Type', '')
    if content_type.startswith('text/html'):
        print('–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML')
    else:
        print(f'–û–∂–∏–¥–∞–ª–∏ HTML, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {content_type}')

@pytest.mark.positive
@allure.feature("API —Ç–µ—Å—Ç—ã")
@allure.story("–ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏")
def test_search_by_digits():
    title = TEST_SEARCH_DIGITS
    response = requests.get(f"{BASE_URL}/search/{title}", params={"stype": 0}, headers=HEADERS)
    assert response.status_code == 200
    content_type = response.headers.get('Content-Type', '')
    if content_type.startswith('text/html'):
        print('–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML')
    else:
        print(f'–û–∂–∏–¥–∞–ª–∏ HTML, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {content_type}')

# üîπ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
@pytest.mark.negative
@allure.feature("API —Ç–µ—Å—Ç—ã")
@allure.story("–ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –≤ —É—Ä–ª–µ")
def test_search_by_url_defect():
    title = TEST_SEARCH_KIRILLIC
    response = requests.get(f"{BASE_URL}/zearch/{title}", params={"stype": 0}, headers=HEADERS)
    assert response.status_code == 404
    content_type = response.headers.get('Content-Type', '')
    if content_type.startswith('text/html'):
        print('–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML')
    else:
        print(f'–û–∂–∏–¥–∞–ª–∏ HTML, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {content_type}')

@pytest.mark.negative
@allure.feature("API —Ç–µ—Å—Ç—ã")
@allure.story("–ü–æ–∏—Å–∫ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
def test_search_by_no_name():
    response = requests.get(f"{BASE_URL}/search/", params={"stype": 0}, headers=HEADERS)
    assert response.status_code == 200
    content_type = response.headers.get('Content-Type', '')
    if content_type.startswith('text/html'):
        print('–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML')
    else:
        print(f'–û–∂–∏–¥–∞–ª–∏ HTML, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {content_type}')
        
